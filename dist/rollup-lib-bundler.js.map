{"version":3,"file":"rollup-lib-bundler.js","sources":["../src/packageParser.js","../src/bundler.js","../src/generateBanner.js","../src/targets.js","../src/index.js"],"sourcesContent":["import { existsSync } from 'fs';\nimport { readFileSync } from 'fs';\n\nfunction packageParser( metadata ) {\n\tif ( typeof metadata === 'string' ) {\n\t\tmetadata = loadAndParseFile( metadata );\n\t} else if ( typeof metadata !== 'object' ) {\n\t\tthrow new TypeError( 'Provide string or object.' );\n\t}\n\n\tlintObject( metadata );\n\n\treturn prepareMetadata( metadata );\n}\n\nfunction loadAndParseFile( path ) {\n\tif ( !existsSync( path ) ) {\n\t\tthrow new ReferenceError( 'File with given path does not exist.' );\n\t}\n\n\tconst contents = readFileSync( path, 'utf8' );\n\tlet parsed;\n\n\ttry {\n\t\tparsed = JSON.parse( contents );\n\t} catch ( e ) {\n\t\tthrow new SyntaxError( 'Given file is not parsable as a correct JSON.' );\n\t}\n\n\treturn parsed;\n}\n\nfunction lintObject( obj ) {\n\tfunction checkProperty( name ) {\n\t\tif ( typeof obj[ name ] === 'undefined' ) {\n\t\t\tthrow new ReferenceError( `Package metadata must contain \"${ name }\" property.` );\n\t\t}\n\t}\n\n\tfunction checkProperties( name1, name2 ) {\n\t\tif ( typeof obj[ name1 ] === 'undefined' && typeof obj[ name2 ] === 'undefined' ) {\n\t\t\tthrow new ReferenceError( `Package metadata must contain either \"${ name1 }\" or \"${ name2 }\" or both properties.` );\n\t\t}\n\t}\n\n\tcheckProperty( 'name' );\n\tcheckProperty( 'version' );\n\tcheckProperty( 'main' );\n\tcheckProperties( 'module', 'jsnext:main' );\n\tcheckProperty( 'author' );\n\tcheckProperty( 'license' );\n}\n\nfunction prepareAuthorMetadata( author ) {\n\tif ( typeof author !== 'object' ) {\n\t\treturn String( author );\n\t}\n\n\treturn author.name;\n}\n\nfunction prepareMetadata( obj ) {\n\treturn {\n\t\tname: obj.name,\n\t\tversion: obj.version,\n\t\tauthor: prepareAuthorMetadata( obj.author ),\n\t\tlicense: obj.license,\n\t\tsrc: 'src/index.js',\n\t\tdist: {\n\t\t\tesm: obj.module || obj[ 'jsnext:main' ],\n\t\t\tcjs: obj.main\n\t\t}\n\t};\n}\n\nexport default packageParser;\n","import { rollup } from 'rollup';\nimport convertCJS from '@rollup/plugin-commonjs';\nimport { terser } from 'rollup-plugin-terser';\nimport json from '@rollup/plugin-json';\nimport babel from '@rollup/plugin-babel';\nimport preset from '@babel/preset-env';\nimport generateBanner from './generateBanner.js';\nimport { node as nodeTarget } from './targets.js';\n\nasync function bundler( metadata ) {\n\tconst configCJS = getRollupConfig( metadata, true );\n\tconst configESM = getRollupConfig( metadata, false );\n\n\tconst bundles = await Promise.all( [\n\t\trollup( configCJS ),\n\t\trollup( configESM )\n\t] );\n\n\treturn Promise.all( [\n\t\tbundles[ 0 ].write( configCJS.output ),\n\t\tbundles[ 1 ].write( configESM.output )\n\t] );\n}\n\nfunction getRollupConfig( metadata, isCJS ) {\n\tconst banner = generateBanner( metadata );\n\tconst plugins = [\n\t\tconvertCJS(),\n\n\t\tjson(),\n\n\t\tbabel( {\n\t\t\tbabelrc: false,\n\t\t\tbabelHelpers: 'bundled',\n\t\t\tpresets: [\n\t\t\t\t[\n\t\t\t\t\tpreset,\n\t\t\t\t\t{\n\t\t\t\t\t\ttargets: {\n\t\t\t\t\t\t\tnode: nodeTarget\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t} ),\n\n\t\tterser()\n\t];\n\n\treturn {\n\t\tinput: metadata.src,\n\t\tplugins,\n\t\toutput: {\n\t\t\tbanner,\n\t\t\tsourcemap: true,\n\t\t\tformat: isCJS ? 'cjs' : 'es',\n\t\t\tfile: isCJS ? metadata.dist.cjs : metadata.dist.esm,\n\t\t\texports: 'auto'\n\t\t}\n\t};\n}\n\nexport default bundler;\n","function generateBanner( metadata ) {\n\treturn `/*! ${metadata.name} v${metadata.version} | (c) ${new Date().getFullYear()} ${metadata.author} | ${metadata.license} license (see LICENSE) */`;\n}\n\nexport default generateBanner;\n","const node = '10.0.0';\n\nexport { node };\n","import packageParser from './packageParser.js';\nimport bundler from './bundler.js';\n\nfunction rlb() {\n\tconst metadata = packageParser( 'package.json' );\n\n\treturn bundler( metadata );\n}\n\nexport default rlb;\n"],"names":["packageParser","metadata","path","existsSync","ReferenceError","contents","readFileSync","parsed","JSON","parse","e","SyntaxError","loadAndParseFile","TypeError","obj","checkProperty","name","name1","name2","checkProperties","lintObject","version","author","prepareAuthorMetadata","license","src","dist","esm","module","cjs","main","String","getRollupConfig","isCJS","banner","Date","getFullYear","generateBanner","plugins","convertCJS","json","babel","babelrc","babelHelpers","presets","preset","targets","node","terser","input","output","sourcemap","format","file","exports","async","configCJS","configESM","bundles","Promise","all","rollup","write","bundler"],"mappings":";sUAGA,SAASA,EAAeC,MACE,iBAAbA,EACXA,EAUF,SAA2BC,OACpBC,aAAYD,SACX,IAAIE,eAAgB,8CAGrBC,EAAWC,eAAcJ,EAAM,YACjCK,MAGHA,EAASC,KAAKC,MAAOJ,GACpB,MAAQK,SACH,IAAIC,YAAa,wDAGjBJ,EAxBKK,CAAkBX,QACvB,GAAyB,iBAAbA,QACZ,IAAIY,UAAW,oCAyBvB,SAAqBC,YACXC,EAAeC,WACK,IAAhBF,EAAKE,SACV,IAAIZ,eAAiB,kCAAkCY,gBAU/DD,EAAe,QACfA,EAAe,WACfA,EAAe,iBARWE,EAAOC,WACH,IAAjBJ,EAAKG,SAAmD,IAAjBH,EAAKI,SACjD,IAAId,eAAiB,yCAAyCa,UAAgBC,0BAOtFC,CAAiB,SAAU,eAC3BJ,EAAe,UACfA,EAAe,WAxCfK,CAAYnB,GAoDL,CACNe,MAFwBF,EAjDDb,GAmDbe,KACVK,QAASP,EAAIO,QACbC,OAAQC,EAAuBT,EAAIQ,QACnCE,QAASV,EAAIU,QACbC,IAAK,eACLC,KAAM,CACLC,IAAKb,EAAIc,QAAUd,EAAK,eACxBe,IAAKf,EAAIgB,OATZ,IAA0BhB,EAR1B,SAASS,EAAuBD,SACR,iBAAXA,EACJS,OAAQT,GAGTA,EAAON,KClCf,SAASgB,EAAiB/B,EAAUgC,SAC7BC,ECzBP,SAAyBjC,SAChB,OAAMA,EAASe,SAASf,EAASoB,kBAAiB,IAAIc,MAAOC,iBAAiBnC,EAASqB,YAAYrB,EAASuB,mCDwBrGa,CAAgBpC,GACzBqC,EAAU,CACfC,YAEAC,YAEAC,UAAO,CACNC,SAAS,EACTC,aAAc,UACdC,QAAS,CACR,CACCC,UACA,CACCC,QAAS,CACRC,KEvCM,eF8CXC,kBAGM,CACNC,MAAOhD,EAASwB,IAChBa,QAAAA,EACAY,OAAQ,CACPhB,OAAAA,EACAiB,WAAW,EACXC,OAAQnB,EAAQ,MAAQ,KACxBoB,KAAMpB,EAAQhC,EAASyB,KAAKG,IAAM5B,EAASyB,KAAKC,IAChD2B,QAAS,wBGtDZ,kBHMAC,eAAwBtD,SACjBuD,EAAYxB,EAAiB/B,GAAU,GACvCwD,EAAYzB,EAAiB/B,GAAU,GAEvCyD,QAAgBC,QAAQC,IAAK,CAClCC,SAAQL,GACRK,SAAQJ,YAGFE,QAAQC,IAAK,CACnBF,EAAS,GAAII,MAAON,EAAUN,QAC9BQ,EAAS,GAAII,MAAOL,EAAUP,UGdxBa,CAFU/D,EAAe"}