/*! @comandeer/rollup-lib-bundler v0.1.1 | (c) 2017 undefined | MIT license (see LICENSE) */import{existsSync,readFileSync}from'fs';import{rollup as rollup$1}from'rollup';import convertCJS from'rollup-plugin-commonjs';import babili from'rollup-plugin-babili';import babel from'rollup-plugin-babel';import preset from'babel-preset-es2015-rollup';import uglify from'rollup-plugin-uglify';function loadAndParseFile(a){if(!existsSync(a))throw new ReferenceError('File with given path does not exist.');const b=readFileSync(a);let c;try{c=JSON.parse(b)}catch(d){throw new SyntaxError('Given file is not parsable as a correct JSON.')}return c}function lintObject(a){function b(d){if('undefined'==typeof a[d])throw new ReferenceError(`Package metadata must contain "${d}" property.`)}b('name'),b('version'),b('main'),function(d,f){if('undefined'==typeof a[d]&&'undefined'==typeof a[f])throw new ReferenceError(`Package metadata must contain either "${d}" or "${f}" or both properties.`)}('module','jsnext:main'),b('author'),b('license')}function prepareAuthorMetadata(a){return'object'==typeof a?a.name:a+''}function prepareMetadata(a){return{name:a.name,version:a.version,author:prepareAuthorMetadata(a.author),license:a.license,src:'src/index.js',dist:{es2015:a.module||a['jsnext:main'],es5:a.main}}}function packageParser(a){if('string'==typeof a)a=loadAndParseFile(a);else if('object'!=typeof a)throw new TypeError('Provide string or object.');return lintObject(a),prepareMetadata(a)}function getRollupConfig(a,b){const c=`/*! ${a.name} v${a.version} | (c) ${new Date().getFullYear()} ${a.author} | ${a.license} license (see LICENSE) */`,d=[convertCJS(),babili({comments:!1,banner:c})];return b&&(d[1]=babel({presets:[[preset]]}),d.push(uglify({output:{preamble:c}}))),{entry:a.src,format:b?'cjs':'es',sourceMap:!0,plugins:d,banner:c,dest:b?a.dist.es5:a.dist.es2015}}function bundler(a){const b=getRollupConfig(a,!0),c=getRollupConfig(a,!1);return Promise.all([rollup$1(b),rollup$1(c)]).then((d)=>{return Promise.all([d[0].write(b),d[1].write(c)])})}function rlb(){const a=packageParser('package.json');return bundler(a)}export{bundler,packageParser};export default rlb;
//# sourceMappingURL=rollup-lib-bundler.es2015.js.map
